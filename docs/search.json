[
  {
    "objectID": "python notebooks/article2.html",
    "href": "python notebooks/article2.html",
    "title": "Journey into Data Science",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib as plt\nimport seaborn as sns\n\nfrom tabulate import tabulate\nfrom scipy import stats\nfrom scipy.stats import skew, kurtosis, norm, kstest\nimport statsmodels.api as sm\n\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import KNNImputer, IterativeImputer\nfrom sklearn.decomposition import PCA, FastICA\nfrom sklearn.preprocessing import PowerTransformer, StandardScaler, QuantileTransformer, OneHotEncoder\n\n\ntrain_df = pd.read_csv(\"./train_data.csv\")\ntest_df = pd.read_csv(\"./test_data.csv\")\n\n\ndef corr_matrix(df):\n    correlation_matrix = df.corr()\n\n    plt.figure(figsize=(10, 8))\n    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5)\n    plt.title('Matriz de correlaciones')\n    plt.show()\n\n\ndef norm_test(data, p_thres = 0.05):\n    mean, std = norm.fit(data)\n\n    if std == 0:\n        return 'No normal', 1e-8\n\n    normal = norm(loc = mean, scale = std)\n    _, p_value = stats.kstest(data, normal.cdf)\n\n    if p_value &gt; p_thres:\n        normality = \"Normal\"\n    else:\n        normality = \"No normal\"\n\n    return normality, p_value\n\n\ndef dataframe_statistics(dataframe):\n    data = dataframe.copy()\n\n    results = {}\n\n    for col in data.columns:\n        \n        if pd.api.types.is_numeric_dtype(data[col]):\n            data_stats = data[col].describe(percentiles=[0.25, 0.75])\n            data_stats['skewness'] = skew(data[col])\n            data_stats['kurtosis'] = kurtosis(data[col])\n            data_stats['normalness'], _ = norm_test(data[col], 0.05)\n            data_stats['uniques'] = data[col].nunique()\n            data_stats['null count'] = data[col].isnull().sum()\n            data_stats['data type'] = type(data[col][0])\n            results[col] = data_stats\n        else:\n            results[col] = {'count': data[col].count(), 'unique': data[col].nunique(), 'top': data[col].mode().iloc[0]}\n\n    \n    print(tabulate(pd.DataFrame(results), headers='keys', tablefmt='grid'))\n\n\ndef plot_function(data, type):\n    num_plots = min(16, len(data.columns))\n    num_cols = 4\n    num_rows = (num_plots + num_cols - 1) // num_cols\n\n    fig, axs = plt.subplots(num_rows, num_cols, figsize=(10, 10))\n    axs = axs.ravel()\n\n    for i, col in enumerate(data.select_dtypes(include=[np.number])): \n        if i &gt;= num_plots:\n            break\n        if type == 'QQPlot': \n            sm.qqplot(data[col], line='r', ax=axs[i], fit=True)\n            axs[i].set_xlabel(\"Theoretical Quantiles\")\n            axs[i].set_ylabel(\"Sample Quantiles\")\n            axs[i].set_title(f\"{col}\")\n        elif type == 'BoxPlot':\n            sns.boxplot(y=data[col], orient=\"v\", ax=axs[i])  \n            axs[i].set_xlabel(\"\")\n            axs[i].set_ylabel(col)\n            axs[i].set_title(f\"Boxplot de {col}\")\n\n    \n    for j in range(num_plots, num_rows * num_cols):\n        fig.delaxes(axs[j])\n\n    plt.tight_layout()\n    plt.show()\n\n\ndef compute_missing_data(data, method, testing=False, percentage=0.15):\n    \n    modified_data = data.copy()\n\n    \n    if testing:\n        \n        for column in data:\n            \n            indices_to_null = np.random.choice(data.index, size=int(len(data) * percentage), replace=False)\n            \n            modified_data.loc[indices_to_null, column] = np.nan\n\n    \n    if method in ['Mean', 'Median', 'Mode', 'Arbitrary']:\n        \n        for column in data:\n            \n            for index in modified_data[modified_data[column].isnull()].index:\n                \n                if method == 'Mean':\n                    \n                    value = data[column].mean()\n                elif method == 'Median':\n                    \n                    value = data[column].median()\n                elif method == 'Mode':\n                    \n                    value = data[column].mode().iloc[0]\n                elif method == 'Arbitrary':\n                    \n                    value = np.random.uniform(data[column].min(), data[column].max())\n                else:\n                    \n                    value = np.nan\n\n                \n                if isinstance(value, np.ndarray):\n                    value = value[0]\n                \n                value = data[column].dtype.type(value)\n\n                \n                modified_data.loc[index, column] = value\n\n    \n    elif method in ['KNN', 'MICE']: \n        if method == 'KNN':\n            \n            imputer = KNNImputer(n_neighbors=5) \n            \n            imputed = imputer.fit_transform(modified_data)\n            \n            modified_data = pd.DataFrame(imputed, columns=modified_data.columns)\n        elif method == 'MICE':\n            \n            imputer = IterativeImputer()\n            \n            imputed = imputer.fit_transform(modified_data) \n            \n            modified_data = pd.DataFrame(imputed, columns=modified_data.columns)\n\n    \n    return modified_data\n\n\n\n\ndef handle_outliers(data, method, imputation_method='KNN', winsorization_rate=0.05):\n    \n    original_data = data.copy()\n    \n    modified_data = data.copy()\n\n    if method == 'Imputacion':\n        for column in modified_data.columns:\n          \n            q1 = np.percentile(modified_data[column], 25)\n            q3 = np.percentile(modified_data[column], 75)\n            iqr = q3 - q1\n           \n            lower_limit = q1 - 1.5 * iqr\n            upper_limit = q3 + 1.5 * iqr\n          \n            modified_data[column] = np.where(modified_data[column] &lt; lower_limit, np.nan, np.where(modified_data[column] &gt; upper_limit, np.nan, modified_data[column]))\n\n        \n        outlierless_data = compute_missing_data(modified_data, imputation_method, False, None)\n        return outlierless_data\n    \n    for column in modified_data.columns:\n    \n        q1 = np.percentile(original_data[column], 25)\n        q3 = np.percentile(original_data[column], 75)\n        iqr = q3 - q1\n        \n        lower_limit = q1 - 1.5 * iqr\n        upper_limit = q3 + 1.5 * iqr\n\n        if method == 'Trimming':\n            \n            mask = (modified_data[column] &gt;= lower_limit) & (modified_data[column] &lt;= upper_limit) \n            modified_data = modified_data[mask].reset_index(drop=True) \n            outlierless_data = modified_data.loc[mask] \n        elif method == 'Capping':\n            \n            modified_data[column] = np.where(modified_data[column] &lt; lower_limit, lower_limit, np.where(modified_data[column] &gt; upper_limit, upper_limit, modified_data[column]))\n            outlierless_data = modified_data \n        elif method == 'Winsorization':\n            \n            lower_winsor = np.percentile(modified_data[column], 100 * winsorization_rate)\n            upper_winsor = np.percentile(modified_data[column], 100 * (1 - winsorization_rate))\n            modified_data[column] = np.where(modified_data[column] &lt; lower_winsor, lower_winsor, np.where(modified_data[column] &gt; upper_winsor, upper_winsor, modified_data[column]))\n            outlierless_data = modified_data\n        else:\n            print(f\"No hubo match {method}\")\n\n    return outlierless_data\n\n\ndef transform_data(data, method, p_thres):\n    modified_data = data.copy()\n    method_used = []\n\n    if method == 'Auto':  \n        for column in modified_data.columns:\n            methods = ['Exp', 'BoxCox', 'Yeo-Johnson']  \n\n            \n\n            \n            exp_data = np.exp(modified_data[column])\n            _, p_val_exp = norm_test(exp_data, p_thres = p_thres)\n\n            print(exp_data)\n\n            \n            pt = PowerTransformer(method = 'box-cox')\n            if (modified_data[column] &lt;= 0.0).any():\n                \n                box_data = modified_data[column]\n                p_val_box = 1e-20\n            else:\n                box_data = pt.fit_transform(modified_data[column].values.reshape(-1, 1))\n                _, p_val_box = norm_test(box_data, p_thres = p_thres)\n\n            print(box_data)\n\n            \n            pt = PowerTransformer(method = 'yeo-johnson')\n            yeo_data = pt.fit_transform(modified_data[column].values.reshape(-1, 1))\n            _, p_val_yeo = norm_test(yeo_data, p_thres = p_thres)\n\n            print(yeo_data)\n\n            \n            \n            \n            \n\n            data = [exp_data, box_data, yeo_data]\n\n            print(data)\n            \n            p_vals = [p_val_exp, p_val_box, p_val_yeo] \n            index = np.argmax(p_vals)  \n            modified_data[column] = data[index]  \n            method_used.append(methods[index]) \n        return modified_data, method_used\n    else:\n        for column in modified_data.columns:\n            \n            if norm_test(modified_data[column], p_thres = p_thres) == 'Normal':\n                continue\n\n            if method == 'Exp':\n                if (modified_data[column] &gt; 20).any(): \n                    print('Los numeros son demasiado grandes para hacer transformacion exponencial')\n                    method_used.append('none') \n                    continue\n                modified_data[column] = np.exp(modified_data[column]) \n                method_used.append('Exp')  \n            elif method == 'box-cox':\n                if (modified_data[column] &lt;= 0.0).any():  \n                    print('Hay numeros negativos o cero, no se puede hacer box-cox')\n                    method_used.append('none')\n                    continue\n                pt = PowerTransformer(method = method) \n                modified_data[column] = pt.fit_transform(modified_data[column].values.reshape(-1, 1)) \n                method_used.append('box-cox')\n            elif method == 'yeo-johnson':\n                pt = PowerTransformer(method = method)\n                modified_data[column] = pt.fit_transform(modified_data[column].values.reshape(-1, 1)) \n                method_used.append('Yeo-Johnson')\n            elif method == 'Cuartiles':\n                qt = QuantileTransformer(n_quantiles = 100, output_distribution='normal')\n                modified_data[column] = qt.fit_transform(modified_data[[column]]) \n                method_used.append('Cuartiles')\n            else:\n                print(f\"No hubo match {method}\")\n    return modified_data, method_used\n\n\ndef reduce_dimensionality(data, method, corr_thres = 0.95, var_thres = 0.01, normality_thres = 0.01, explained_var = 0.99, do_ica = False, filter_non_normal = False):\n    modified_data = data.copy()\n\n    if method == 'Filter':\n        \n        for column in modified_data.columns:  \n            var = modified_data[column].var() \n\n            _, p_val = norm_test(modified_data[column], normality_thres) \n\n            if var &lt; var_thres:  \n                print(f'Quitando {column} por varianza {var}')  \n                modified_data.drop(column, axis=1, inplace=True)  \n            elif p_val &lt; normality_thres and filter_non_normal:  \n                print(f'Quitando {column} por no normal {p_val}')  \n                modified_data.drop(column, axis=1, inplace=True)  \n\n        \n        corr_matrix = np.corrcoef(modified_data, rowvar=False)\n        \n        np.fill_diagonal(corr_matrix, 0)\n        corr_mask = np.abs(corr_matrix) &lt; corr_thres \n        modified_data = modified_data.loc[:, np.all(corr_mask, axis=0)] \n\n    elif method == 'Projection': \n        scaler = StandardScaler()   \n        modified_data = scaler.fit_transform(modified_data) \n\n        \n        pca = PCA(explained_var) \n        modified_data = pca.fit_transform(modified_data)\n        print(f'Explained variance ratio: {pca.explained_variance_ratio_}')\n        \n        if pca.n_components_ &gt; 1 and do_ica:\n            ica = FastICA()\n            modified_data = ica.fit_transform(modified_data) \n\n        modified_data = pd.DataFrame(modified_data, columns=[f\"PC{i}\" for i in range(1, pca.n_components_ + 1)]) \n\n    else:\n        print(f\"No hubo match {method}\")\n\n    return modified_data\n\nPrimero revisamos el dataset. Antes de cualquier manipulacion de los datos, debemos explorar, entender los datos y finalmente comprender lo que deseamos hacer con los mismos. En este caso lo que se intenta es determinar si una persona es elegible para una tarjeta de credito. La variable de interes para este caso es “Is High Risk”.\n\ntrain_df.head(5)\n\n\n\n\n\n\n\n\n\nID\nGender\nHas a car\nHas a property\nChildren count\nIncome\nEmployment status\nEducation level\nMarital status\nDwelling\nAge\nEmployment length\nHas a mobile phone\nHas a work phone\nHas a phone\nHas an email\nJob title\nFamily member count\nAccount age\nIs high risk\n\n\n\n\n0\n5037048\nM\nY\nY\n0\n135000.0\nWorking\nSecondary / secondary special\nMarried\nWith parents\n-16271\n-3111\n1\n0\n0\n0\nCore staff\n2.0\n-17.0\n0\n\n\n1\n5044630\nF\nY\nN\n1\n135000.0\nCommercial associate\nHigher education\nSingle / not married\nHouse / apartment\n-10130\n-1651\n1\n0\n0\n0\nAccountants\n2.0\n-1.0\n0\n\n\n2\n5079079\nF\nN\nY\n2\n180000.0\nCommercial associate\nSecondary / secondary special\nMarried\nHouse / apartment\n-12821\n-5657\n1\n0\n0\n0\nLaborers\n4.0\n-38.0\n0\n\n\n3\n5112872\nF\nY\nY\n0\n360000.0\nCommercial associate\nHigher education\nSingle / not married\nHouse / apartment\n-20929\n-2046\n1\n0\n0\n1\nManagers\n1.0\n-11.0\n0\n\n\n4\n5105858\nF\nN\nN\n0\n270000.0\nWorking\nSecondary / secondary special\nSeparated\nHouse / apartment\n-16207\n-515\n1\n0\n1\n0\nNaN\n1.0\n-41.0\n0\n\n\n\n\n\n\n\n\nEl primer analisis exploratorio a realizar es si hay alguna variable que no aporta significancia al resultado. En este dataset podemos ver que el ID de un cliente no ayuda a determinar si una persona es o no elegible para tarjeta de credito. Es simplemente un valor que el banco les asignó para identificarlos.\n\ntrain_df_step1 = train_df.drop(['ID'], axis=1)\n\nExplorando mas a fondo, vemos que todas las personas del dataset tienen telefono movil, por lo que tampoco aporta informacion.\n\nprint(train_df_step1['Has a mobile phone'].unique())\ntrain_df_step2 = train_df_step1.drop(['Has a mobile phone'], axis=1)\n\n[1]\n\n\nAhora nos enfocamos en el tipo de variables que hay: - Categoricas - Nominales - Ordinales - Numericas - Discretas - Continuas\nLas numericas no requieren transformacion, pero las categoricas si se deben convertir en numericas para poder analizarlas con cualquier modelo. Las mas sencillas son Gender, Has car y Has a property, ya que se remplazan directamente por 1 y 0.\n\nwith pd.option_context(\"future.no_silent_downcasting\", True): #hacemos esto porque remplazar toda una columna de string por numeros enteros levanta sospechas a pandas\n    train_df_step2['Gender'] = train_df_step2['Gender'].replace({'M': 0, 'F': 1})\n    train_df_step2['Has a car'] = train_df_step2['Has a car'].replace({'N':0, 'Y':1})\n    train_df_step2['Has a property'] = train_df_step2['Has a car'].replace({'N':0, 'Y':1})\n\nEmployment status, Education level, Marital status, Dwelling y Job title debemos analizarlas con mas detalle para ver cuantas categorias contiene cada una.\n\nprint(f\"Employment status: {train_df['Employment status'].unique()}\\n\")\nprint(f\"Education level: {train_df['Education level'].unique()}\\n\")\nprint(f\"Marital status: {train_df['Marital status'].unique()}\\n\")\nprint(f\"Dwelling: {train_df['Dwelling'].unique()}\\n\")\nprint(f\"Job title: {train_df['Job title'].unique()}\")\n\nEmployment status: ['Working' 'Commercial associate' 'Pensioner' 'State servant' 'Student']\n\nEducation level: ['Secondary / secondary special' 'Higher education' 'Lower secondary'\n 'Incomplete higher' 'Academic degree']\n\nMarital status: ['Married' 'Single / not married' 'Separated' 'Civil marriage' 'Widow']\n\nDwelling: ['With parents' 'House / apartment' 'Municipal apartment'\n 'Rented apartment' 'Office apartment' 'Co-op apartment']\n\nJob title: ['Core staff' 'Accountants' 'Laborers' 'Managers' nan 'Sales staff'\n 'Medicine staff' 'High skill tech staff' 'HR staff' 'Low-skill Laborers'\n 'Drivers' 'Secretaries' 'Cleaning staff' 'Cooking staff' 'Security staff'\n 'Private service staff' 'IT staff' 'Waiters/barmen staff' 'Realty agents']\n\n\nEmployment status, Marital status, Dwelling y Job title son variables nominales mientras que Education level puede considerarse ordinal.\nA las variables nominales les podriamos aplicar One Hot Encoding, pero entre todas ellas tenemos 35 valores, por lo que terminariamos con muchas mas dimensiones que variables iniciales. Podriamos utilizar Binary Encoding, pero exploremos un poco mas los datos. Una observacion importante es que Job title tiene valores nulos, pero siempre se debe analizar con cuidado los datos. Uno podria suponer que aquellas personas sin titulo de trabajo, estan desempleadas, pero no debemos suponer.\n\nnan_job_df = train_df[train_df['Job title'].isna()]\nprint(f\"Employment status: {nan_job_df['Employment status'].unique()}\\n\")\n\nEmployment status: ['Working' 'Pensioner' 'Commercial associate' 'State servant']\n\n\n\nPodemos ver que efectivamente algunas personas sin Job title asignado, tienen Employment status que indica que si tienen trabajo. En este caso, el titulo del trabajo de una persona no nos brinda tanta informacion sobre su eligibilidad para recibir una tarjeta de credito (principalmente porque tenemos la informacion completa acerca de sus ingresos). Pero si se quisiera utilizar esta informacion, se podria hacer imputacion de datos (algun algoritmo de clusterizacion como KNN, asumir la moda o incluso entrenar un modelo para primero rellenar esos valores). Quitando Job title, podemos utilizar One Hot Encoding sin agregar tantas dimensiones al dataset.\n\ntrain_df_step3 = train_df_step2.drop(['Job title'], axis=1)\n\nencoder = OneHotEncoder(sparse=False, drop='first')\ntrain_df_step4 = encoder.fit_transform(train_df_step3[['Employment status', 'Education level', 'Marital status', 'Dwelling']])\n\n\nTypeError: OneHotEncoder.__init__() got an unexpected keyword argument 'sparse'\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "articles/Article3.html",
    "href": "articles/Article3.html",
    "title": "Markdown",
    "section": "",
    "text": "Markdown is a lightweight markup language with plain-text formatting syntax. With it, you can create formatted text using simple symbols and keywords.\nJupyter Notebooks are interactive computational environments where you can combine code execution, text, mathematics, plots, and rich media. They are widely used in data science, machine learning, and academic research for their flexibility and ease of use.\nIn this article I will be covering the most common formatting techniques used in Markdown."
  },
  {
    "objectID": "articles/Article3.html#text-formatting",
    "href": "articles/Article3.html#text-formatting",
    "title": "Markdown",
    "section": "Text formatting",
    "text": "Text formatting\n\nHeaders\nOne can apply header formatting using (#).\n# is a title\n## is a header\n### is a sub header\n#### is a sub sub header\n\n\nEmphasis\nEncapsulating a text in asterisks (*) one can apply italics format:\n*This text will be in italics.*\nThis text is in italics.\nEncapsulating a text in double asterisks (**) one can apply bold format:\n**This text will be bold.**\nThis text is bold.\nEncapsulating a text in double tilde (~) one can apply strikethrough:\n~~This text will be strikethrough.~~\nThis text is strikethrough.\nEncapsulating a text in backticks (`) one can apply coding format:\nThis text is displayed as code.\n`This text will be displayed as code.`\nEncapsulating a text in tripple backticks (```) a line before it begins and a line after it finishes, one can apply multiline coding format:\nThis is the first line of a multiline code.\nThis is the second line of a multiline code.\nThis is the third line of a multiline code.\nUsing a single greater than (&gt;) at the beggining, one can show a quote:\n&gt; This text will be a quote\n\nThis text is a quote"
  },
  {
    "objectID": "articles/Article3.html#lists",
    "href": "articles/Article3.html#lists",
    "title": "Markdown",
    "section": "Lists",
    "text": "Lists\n\nUnordered lists\nTo start an unordered list, use a single hyphen and space (-) followed by text. To start an ordered list, use a number, dot and space (1.) followed by text. To add sublists, follow the same syntax but add two spaces before.\nThis input:\n- First bullet point\n    - First sub bullet point\n        - First sub sub bullet point\n        - Second sub sub bullet point\n        - Third sub sub bullet point\n    - Second sub bullet point\n    - Third sub bullet point\n- Second bullet point\n- Third bullet point\nHas this output:\n\nFirst bullet point\n\nFirst sub bullet point\n\nFirst sub sub bullet point\nSecond sub sub bullet point\nThird sub sub bullet point\n\nSecond sub bullet point\nThird sub bullet point\n\nSecond bullet point\nThird bullet point\n\n\n\nOrdered lists\nTo start an ordered list, use a number, dot and space (1.) followed by text. To add sublists, follow the same syntax but add two spaces before.\nThis input:\n1. First points\n    1. First sub point\n        1. First sub sub point\n        2. Second sub sub point\n        3. Third sub sub point\n    2. Second sub point\n    3. Third sub point\n2. Second point\n3. Third point\nHas this output:\n\nFirst points\n\nFirst sub point\n\nFirst sub sub point\nSecond sub sub point\nThird sub sub point\n\nSecond sub point\nThird sub point\n\nSecond point\nThird point"
  },
  {
    "objectID": "articles/Article3.html#hyperlink",
    "href": "articles/Article3.html#hyperlink",
    "title": "Markdown",
    "section": "Hyperlink",
    "text": "Hyperlink\n\nExternal links\nLinking to outside websites is done by encapsulating in square brackets ([]) the text that can be clicked to use the link, followed by parenthesis (()) with the website’s URL. One can add a space after the URL and a text encapsulated by quotation marks (\"\") to show a name when the link is hovered over.\n[Text to be clicked](http://google.com \"Hovered information\")\nText to be clicked\n[External Link to Google](http://google.com)\nExternal Link to Google\n\n\nInternal links\nInternal links work the same way as external links, but inside the document. Instead of an URL, a number sign (#) is used followed by the name of the heading in the document to link. In this instance, spaces are replaced by hyphens.\n[This will take you to the text formatting header.](#text-formatting)\nThis will take you to the text formatting header.\n\n\nImages\nImages work the same way as external links, but to display them, an exclamation mark (!) is used before the square brackets ([]).\n![Look at this image!](https://flutter.github.io/assets-for-api-docs/assets/widgets/owl.jpg \"Fancy owl\")"
  },
  {
    "objectID": "articles/Article3.html#mathematical-notation",
    "href": "articles/Article3.html#mathematical-notation",
    "title": "Markdown",
    "section": "Mathematical notation",
    "text": "Mathematical notation\nMathematical notation is rendered by using LaTeX.\n\nIt can be used inline by wrapping a mathematical expression with single dollar signs ($), or multiline by wrapping the expressions with double dollar signs ($$).\nSingle line expressions will be left aligned if they are not inside a text block.\nMultiline expressions will automatically be aligned at the center\n\nOne can aligned them at a specific point by wrapping the expression inside the double dollar signs with \\begin{split} and \\end{split}. Place an ampersand (&) where the alignment should be.\n\nAll special mathematical symbols (like roots, powers, underlines, bars, greek letters, summation, integral, fractions, and so on) start by using a backslash and the corresponding name.\n\n\n\n\nInline Expression\nLaTeX\n\n\n\n\n$\\sqrt{x}$\n\\(\\sqrt{x}\\)\n\n\n$x^2$\n\\(x^2\\)\n\n\n$\\underline{x}$\n\\(\\underline{x}\\)\n\n\n$\\bar{x}$\n\\(\\bar{x}\\)\n\n\n$\\sigma$\n\\(\\sigma\\)\n\n\n$\\frac{x+1}{x-1}$\n\\(\\frac{x+1}{x-1}\\)\n\n\n$\\sum_{0}^{\\infty}{\\frac{1}{n}}$\n\\(\\sum_{0}^{\\infty}{\\frac{1}{n}}\\)\n\n\n$\\int_{0}^{\\infty}{\\frac{1}{n}}$\n\\(\\int_{0}^{\\infty}{\\frac{1}{n}}\\)\n\n\n\nMultiline aligned at the equal sign input:\n$$\n\\begin{split}\n\\dot{x} & = \\sigma (3y - 5t)\\\\\n\\dot{x} & = 3 \\sigma y - 5 \\sigma t \\\\\n\\dot{x} & = (1+1+1) \\sigma y - (10-5) \\sigma t \\\\\n\\end{split}\n$$\nOutput: \\[\n\\begin{split}\n\\dot{x} & = \\sigma (3y - 5t)\\\\\n\\dot{x} & = 3 \\sigma y - 5 \\sigma t \\\\\n\\dot{x} & = (1+1+1) \\sigma y - (10-5) \\sigma t \\\\\n\\end{split}\n\\]\nMultiline aligned at the center input:\n$$\n\\begin{gather}\n\\dot{x} = \\sigma (3y - 5t)\\\\\n\\dot{x} = 3 \\sigma y - 5 \\sigma t\\\\\n\\dot{x} = (1+1+1) \\sigma y - (10-5) \\sigma t\\\\\n\\end{gather}\n$$\n\\[\n\\begin{gather}\n\\dot{x} = \\sigma (3y - 5t)\\\\\n\\dot{x} = 3 \\sigma y - 5 \\sigma t\\\\\n\\dot{x} = (1+1+1) \\sigma y - (10-5) \\sigma t\\\\\n\\end{gather}\n\\]"
  },
  {
    "objectID": "articles/Article3.html#colored-boxes",
    "href": "articles/Article3.html#colored-boxes",
    "title": "Markdown",
    "section": "Colored boxes",
    "text": "Colored boxes\nColored boxes can be used to highlight important information.\n\nBlue boxes provide useful information (alert-info).\nYellow boxes provide warnings (alert-warning).\nGreen boxes indicate successful outcomes (alert-success).\nRed boxes provide critical information regarding errors or potential mistakes (alert-danger).\n\nThey are a special case and one has to use HTML notation for them. Start by using &lt;div&gt;&lt;/div&gt; with class \"alert alert-info\" (or the corresponding name) and finish by putting the text in between them.\nInput:\n&lt;div class=\"alert alert-info\"&gt;\n&lt;b&gt;Alert info:&lt;/b&gt; Blue boxes (alert-info) provide useful information.\n&lt;/div&gt;\nOutput:\n\nAlert info: Blue boxes (alert-info) provide useful information.\n\nInput:\n&lt;div class=\"alert alert-warning\"&gt;\n&lt;b&gt;Alert warning:&lt;/b&gt; Yellow boxes (alert-warning) provide warnings.\n&lt;/div&gt;\nOutput:\n\nAlert warning: Yellow boxes (alert-warning) provide warnings.\n\nInput:\n&lt;div class=\"alert alert-success\"&gt;\n&lt;b&gt;Alert success:&lt;/b&gt; Green boxes (alert-success) indicate successful outcomes.\n&lt;/div&gt;\nOutput:\n\nAlert success: Green boxes (alert-success) indicate successful outcomes.\n\nInput:\n&lt;div class=\"alert alert-danger\"&gt;\n&lt;b&gt;Alert danger:&lt;/b&gt; Red boxes (alert-danger) provide critical information regarding errors or potential mistakes.\n&lt;/div&gt;\nOutput:\n\nAlert danger: Red boxes (alert-danger) provide critical information regarding errors or potential mistakes."
  },
  {
    "objectID": "articles/Article3 copy 2.html",
    "href": "articles/Article3 copy 2.html",
    "title": "Markdown",
    "section": "",
    "text": "Markdown is a lightweight markup language with plain-text formatting syntax. With it, you can create formatted text using simple symbols and keywords.\nJupyter Notebooks are interactive computational environments where you can combine code execution, text, mathematics, plots, and rich media. They are widely used in data science, machine learning, and academic research for their flexibility and ease of use.\nIn this article I will be covering the most common formatting techniques used in Markdown."
  },
  {
    "objectID": "articles/Article3 copy 2.html#text-formatting",
    "href": "articles/Article3 copy 2.html#text-formatting",
    "title": "Markdown",
    "section": "Text formatting",
    "text": "Text formatting\n\nHeaders\nOne can apply header formatting using (#).\n# is a title\n## is a header\n### is a sub header\n#### is a sub sub header\n\n\nEmphasis\nEncapsulating a text in asterisks (*) one can apply italics format:\n*This text will be in italics.*\nThis text is in italics.\nEncapsulating a text in double asterisks (**) one can apply bold format:\n**This text will be bold.**\nThis text is bold.\nEncapsulating a text in double tilde (~) one can apply strikethrough:\n~~This text will be strikethrough.~~\nThis text is strikethrough.\nEncapsulating a text in backticks (`) one can apply coding format:\nThis text is displayed as code.\n`This text will be displayed as code.`\nEncapsulating a text in tripple backticks (```) a line before it begins and a line after it finishes, one can apply multiline coding format:\nThis is the first line of a multiline code.\nThis is the second line of a multiline code.\nThis is the third line of a multiline code.\nUsing a single greater than (&gt;) at the beggining, one can show a quote:\n&gt; This text will be a quote\n\nThis text is a quote"
  },
  {
    "objectID": "articles/Article3 copy 2.html#lists",
    "href": "articles/Article3 copy 2.html#lists",
    "title": "Markdown",
    "section": "Lists",
    "text": "Lists\n\nUnordered lists\nTo start an unordered list, use a single hyphen and space (-) followed by text. To start an ordered list, use a number, dot and space (1.) followed by text. To add sublists, follow the same syntax but add two spaces before.\nThis input:\n- First bullet point\n    - First sub bullet point\n        - First sub sub bullet point\n        - Second sub sub bullet point\n        - Third sub sub bullet point\n    - Second sub bullet point\n    - Third sub bullet point\n- Second bullet point\n- Third bullet point\nHas this output:\n\nFirst bullet point\n\nFirst sub bullet point\n\nFirst sub sub bullet point\nSecond sub sub bullet point\nThird sub sub bullet point\n\nSecond sub bullet point\nThird sub bullet point\n\nSecond bullet point\nThird bullet point\n\n\n\nOrdered lists\nTo start an ordered list, use a number, dot and space (1.) followed by text. To add sublists, follow the same syntax but add two spaces before.\nThis input:\n1. First points\n    1. First sub point\n        1. First sub sub point\n        2. Second sub sub point\n        3. Third sub sub point\n    2. Second sub point\n    3. Third sub point\n2. Second point\n3. Third point\nHas this output:\n\nFirst points\n\nFirst sub point\n\nFirst sub sub point\nSecond sub sub point\nThird sub sub point\n\nSecond sub point\nThird sub point\n\nSecond point\nThird point"
  },
  {
    "objectID": "articles/Article3 copy 2.html#hyperlink",
    "href": "articles/Article3 copy 2.html#hyperlink",
    "title": "Markdown",
    "section": "Hyperlink",
    "text": "Hyperlink\n\nExternal links\nLinking to outside websites is done by encapsulating in square brackets ([]) the text that can be clicked to use the link, followed by parenthesis (()) with the website’s URL. One can add a space after the URL and a text encapsulated by quotation marks (\"\") to show a name when the link is hovered over.\n[Text to be clicked](http://google.com \"Hovered information\")\nText to be clicked\n[External Link to Google](http://google.com)\nExternal Link to Google\n\n\nInternal links\nInternal links work the same way as external links, but inside the document. Instead of an URL, a number sign (#) is used followed by the name of the heading in the document to link. In this instance, spaces are replaced by hyphens.\n[This will take you to the text formatting header.](#text-formatting)\nThis will take you to the text formatting header.\n\n\nImages\nImages work the same way as external links, but to display them, an exclamation mark (!) is used before the square brackets ([]).\n![Look at this image!](https://flutter.github.io/assets-for-api-docs/assets/widgets/owl.jpg \"Fancy owl\")"
  },
  {
    "objectID": "articles/Article3 copy 2.html#mathematical-notation",
    "href": "articles/Article3 copy 2.html#mathematical-notation",
    "title": "Markdown",
    "section": "Mathematical notation",
    "text": "Mathematical notation\nMathematical notation is rendered by using LaTeX.\n\nIt can be used inline by wrapping a mathematical expression with single dollar signs ($), or multiline by wrapping the expressions with double dollar signs ($$).\nSingle line expressions will be left aligned if they are not inside a text block.\nMultiline expressions will automatically be aligned at the center\n\nOne can aligned them at a specific point by wrapping the expression inside the double dollar signs with \\begin{split} and \\end{split}. Place an ampersand (&) where the alignment should be.\n\nAll special mathematical symbols (like roots, powers, underlines, bars, greek letters, summation, integral, fractions, and so on) start by using a backslash and the corresponding name.\n\n\n\n\nInline Expression\nLaTeX\n\n\n\n\n$\\sqrt{x}$\n\\(\\sqrt{x}\\)\n\n\n$x^2$\n\\(x^2\\)\n\n\n$\\underline{x}$\n\\(\\underline{x}\\)\n\n\n$\\bar{x}$\n\\(\\bar{x}\\)\n\n\n$\\sigma$\n\\(\\sigma\\)\n\n\n$\\frac{x+1}{x-1}$\n\\(\\frac{x+1}{x-1}\\)\n\n\n$\\sum_{0}^{\\infty}{\\frac{1}{n}}$\n\\(\\sum_{0}^{\\infty}{\\frac{1}{n}}\\)\n\n\n$\\int_{0}^{\\infty}{\\frac{1}{n}}$\n\\(\\int_{0}^{\\infty}{\\frac{1}{n}}\\)\n\n\n\nMultiline aligned at the equal sign input:\n$$\n\\begin{split}\n\\dot{x} & = \\sigma (3y - 5t)\\\\\n\\dot{x} & = 3 \\sigma y - 5 \\sigma t \\\\\n\\dot{x} & = (1+1+1) \\sigma y - (10-5) \\sigma t \\\\\n\\end{split}\n$$\nOutput: \\[\n\\begin{split}\n\\dot{x} & = \\sigma (3y - 5t)\\\\\n\\dot{x} & = 3 \\sigma y - 5 \\sigma t \\\\\n\\dot{x} & = (1+1+1) \\sigma y - (10-5) \\sigma t \\\\\n\\end{split}\n\\]\nMultiline aligned at the center input:\n$$\n\\begin{gather}\n\\dot{x} = \\sigma (3y - 5t)\\\\\n\\dot{x} = 3 \\sigma y - 5 \\sigma t\\\\\n\\dot{x} = (1+1+1) \\sigma y - (10-5) \\sigma t\\\\\n\\end{gather}\n$$\n\\[\n\\begin{gather}\n\\dot{x} = \\sigma (3y - 5t)\\\\\n\\dot{x} = 3 \\sigma y - 5 \\sigma t\\\\\n\\dot{x} = (1+1+1) \\sigma y - (10-5) \\sigma t\\\\\n\\end{gather}\n\\]"
  },
  {
    "objectID": "articles/Article3 copy 2.html#colored-boxes",
    "href": "articles/Article3 copy 2.html#colored-boxes",
    "title": "Markdown",
    "section": "Colored boxes",
    "text": "Colored boxes\nColored boxes can be used to highlight important information.\n\nBlue boxes provide useful information (alert-info).\nYellow boxes provide warnings (alert-warning).\nGreen boxes indicate successful outcomes (alert-success).\nRed boxes provide critical information regarding errors or potential mistakes (alert-danger).\n\nThey are a special case and one has to use HTML notation for them. Start by using &lt;div&gt;&lt;/div&gt; with class \"alert alert-info\" (or the corresponding name) and finish by putting the text in between them.\nInput:\n&lt;div class=\"alert alert-info\"&gt;\n&lt;b&gt;Alert info:&lt;/b&gt; Blue boxes (alert-info) provide useful information.\n&lt;/div&gt;\nOutput:\n\nAlert info: Blue boxes (alert-info) provide useful information.\n\nInput:\n&lt;div class=\"alert alert-warning\"&gt;\n&lt;b&gt;Alert warning:&lt;/b&gt; Yellow boxes (alert-warning) provide warnings.\n&lt;/div&gt;\nOutput:\n\nAlert warning: Yellow boxes (alert-warning) provide warnings.\n\nInput:\n&lt;div class=\"alert alert-success\"&gt;\n&lt;b&gt;Alert success:&lt;/b&gt; Green boxes (alert-success) indicate successful outcomes.\n&lt;/div&gt;\nOutput:\n\nAlert success: Green boxes (alert-success) indicate successful outcomes.\n\nInput:\n&lt;div class=\"alert alert-danger\"&gt;\n&lt;b&gt;Alert danger:&lt;/b&gt; Red boxes (alert-danger) provide critical information regarding errors or potential mistakes.\n&lt;/div&gt;\nOutput:\n\nAlert danger: Red boxes (alert-danger) provide critical information regarding errors or potential mistakes."
  },
  {
    "objectID": "articles/Article1.html",
    "href": "articles/Article1.html",
    "title": "Learning to use Markdown",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see Figure 1.\nSee code\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: A line plot on a polar axis\nMarkdown is a lightweight markup language with plain-text formatting syntax. With it, you can create formatted text using simple symbols and keywords.\nSee code\nimport pandas as pd\nimport seaborn as sns\nimport string\n\n# Seed for reproducibility\nnp.random.seed(42)\n\n# Creating a list of standard deviations, from 10% to 100% of the mean\nstd_devs = np.linspace(0.1 * 50, 1 * 50, 20)  # Varying standard deviations from 10% to 100% of the mean\n\n# Generating the DataFrame with varying standard deviations\nrandom_array = np.array([np.random.normal(50, std_dev, 10000) for std_dev in std_devs]).T  # Transpose to correct shape\n\n# Creating a Pandas DataFrame from the NumPy array\ndf = pd.DataFrame(random_array, columns=list(string.ascii_uppercase[:20]))\ndf\n\n\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\nH\nI\nJ\nK\nL\nM\nN\nO\nP\nQ\nR\nS\nT\n\n\n\n\n0\n52.483571\n45.000565\n53.391208\n26.024655\n43.170483\n51.653998\n51.514515\n56.908552\n65.901078\n75.286699\n79.561792\n74.869241\n42.692478\n89.995903\n39.867656\n105.516108\n111.451976\n-32.525973\n69.661413\n98.062920\n\n\n1\n49.308678\n47.748951\n52.758677\n37.229121\n64.657536\n48.920282\n60.813557\n74.070487\n42.908800\n40.264086\n16.859561\n48.473472\n62.798210\n60.593442\n17.262896\n45.612414\n9.232067\n34.694287\n134.460247\n121.698080\n\n\n2\n53.238443\n45.598245\n40.881254\n42.893867\n47.131506\n66.030160\n56.552748\n17.518544\n48.405431\n34.747871\n66.505962\n36.134608\n74.569218\n63.760603\n67.070757\n6.106478\n116.019081\n51.242070\n-22.589158\n49.809540\n\n\n3\n57.615149\n50.813607\n55.643320\n51.811782\n51.310871\n75.816103\n25.450596\n87.538859\n45.800054\n74.560846\n32.237634\n55.217307\n10.450709\n6.844721\n11.283949\n106.411044\n87.159225\n85.999384\n41.246439\n61.730100\n\n\n4\n48.829233\n58.821315\n35.491300\n62.397754\n60.383285\n61.567949\n46.422610\n57.122925\n62.310233\n-21.882625\n40.608709\n-16.041974\n53.366803\n64.367963\n93.283823\n45.413361\n11.316524\n50.494797\n45.113700\n13.932754\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n9995\n56.505510\n52.857675\n44.379039\n63.553670\n50.822090\n38.179260\n41.323309\n70.302872\n93.632840\n44.073028\n15.959961\n21.770127\n11.827415\n37.611421\n79.726649\n107.346228\n75.928085\n73.768662\n88.245334\n-13.227413\n\n\n9996\n40.008275\n60.149017\n64.065881\n53.208307\n49.639274\n31.489780\n59.367938\n40.735754\n33.966869\n35.005854\n47.692215\n48.332770\n110.578449\n46.866184\n57.355496\n103.146355\n22.626414\n85.637240\n137.151474\n78.282708\n\n\n9997\n46.473416\n52.787871\n45.118266\n57.462907\n57.238070\n52.374908\n57.068031\n39.880401\n42.902261\n60.768028\n62.312386\n-5.742483\n41.242477\n-11.941902\n43.198879\n13.566475\n41.091867\n32.726676\n54.405315\n58.000998\n\n\n9998\n52.478828\n62.626009\n31.574420\n59.861232\n53.838644\n13.250984\n60.141674\n49.927866\n56.216647\n44.444956\n23.593306\n31.330178\n38.875945\n75.748077\n55.784273\n38.068513\n24.739899\n40.151724\n102.353646\n92.783654\n\n\n9999\n53.221942\n38.063749\n47.771391\n54.309164\n71.939371\n49.892251\n21.452426\n28.561574\n45.296212\n53.159551\n72.751704\n57.303077\n81.034463\n59.104497\n79.299922\n79.687871\n46.860418\n11.709003\n47.260669\n-3.247398\n\n\n\n\n10000 rows × 20 columns\nJupyter Notebooks are interactive computational environments where you can combine code execution, text, mathematics, plots, and rich media. They are widely used in data science, machine learning, and academic research for their flexibility and ease of use.\nIn this article I will be covering the most common formatting techniques used in Markdown."
  },
  {
    "objectID": "articles/Article1.html#text-formatting",
    "href": "articles/Article1.html#text-formatting",
    "title": "Learning to use Markdown",
    "section": "Text formatting",
    "text": "Text formatting\n\nHeaders\nOne can apply header formatting using (#).\n# is a title\n## is a header\n### is a sub header\n#### is a sub sub header\n\n\nEmphasis\nEncapsulating a text in asterisks (*) one can apply italics format:\n*This text will be in italics.*\nThis text is in italics.\nEncapsulating a text in double asterisks (**) one can apply bold format:\n**This text will be bold.**\nThis text is bold.\nEncapsulating a text in double tilde (~) one can apply strikethrough:\n~~This text will be strikethrough.~~\nThis text is strikethrough.\nEncapsulating a text in backticks (`) one can apply coding format:\nThis text is displayed as code.\n`This text will be displayed as code.`\nEncapsulating a text in tripple backticks (```) a line before it begins and a line after it finishes, one can apply multiline coding format:\nThis is the first line of a multiline code.\nThis is the second line of a multiline code.\nThis is the third line of a multiline code.\nUsing a single greater than (&gt;) at the beggining, one can show a quote:\n&gt; This text will be a quote\n\nThis text is a quote"
  },
  {
    "objectID": "articles/Article1.html#lists",
    "href": "articles/Article1.html#lists",
    "title": "Learning to use Markdown",
    "section": "Lists",
    "text": "Lists\n\nUnordered lists\nTo start an unordered list, use a single hyphen and space (-) followed by text. To start an ordered list, use a number, dot and space (1.) followed by text. To add sublists, follow the same syntax but add two spaces before.\nThis input:\n- First bullet point\n    - First sub bullet point\n        - First sub sub bullet point\n        - Second sub sub bullet point\n        - Third sub sub bullet point\n    - Second sub bullet point\n    - Third sub bullet point\n- Second bullet point\n- Third bullet point\nHas this output:\n\nFirst bullet point\n\nFirst sub bullet point\n\nFirst sub sub bullet point\nSecond sub sub bullet point\nThird sub sub bullet point\n\nSecond sub bullet point\nThird sub bullet point\n\nSecond bullet point\nThird bullet point\n\n\n\nOrdered lists\nTo start an ordered list, use a number, dot and space (1.) followed by text. To add sublists, follow the same syntax but add two spaces before.\nThis input:\n1. First points\n    1. First sub point\n        1. First sub sub point\n        2. Second sub sub point\n        3. Third sub sub point\n    2. Second sub point\n    3. Third sub point\n2. Second point\n3. Third point\nHas this output:\n\nFirst points\n\nFirst sub point\n\nFirst sub sub point\nSecond sub sub point\nThird sub sub point\n\nSecond sub point\nThird sub point\n\nSecond point\nThird point"
  },
  {
    "objectID": "articles/Article1.html#hyperlink",
    "href": "articles/Article1.html#hyperlink",
    "title": "Learning to use Markdown",
    "section": "Hyperlink",
    "text": "Hyperlink\n\nExternal links\nLinking to outside websites is done by encapsulating in square brackets ([]) the text that can be clicked to use the link, followed by parenthesis (()) with the website’s URL. One can add a space after the URL and a text encapsulated by quotation marks (\"\") to show a name when the link is hovered over.\n[Text to be clicked](http://google.com \"Hovered information\")\nText to be clicked\n[External Link to Google](http://google.com)\nExternal Link to Google\n\n\nInternal links\nInternal links work the same way as external links, but inside the document. Instead of an URL, a number sign (#) is used followed by the name of the heading in the document to link. In this instance, spaces are replaced by hyphens.\n[This will take you to the text formatting header.](#text-formatting)\nThis will take you to the text formatting header.\n\n\nImages\nImages work the same way as external links, but to display them, an exclamation mark (!) is used before the square brackets ([]).\n![Look at this image!](https://flutter.github.io/assets-for-api-docs/assets/widgets/owl.jpg \"Fancy owl\")"
  },
  {
    "objectID": "articles/Article1.html#mathematical-notation",
    "href": "articles/Article1.html#mathematical-notation",
    "title": "Learning to use Markdown",
    "section": "Mathematical notation",
    "text": "Mathematical notation\nMathematical notation is rendered by using LaTeX.\n\nIt can be used inline by wrapping a mathematical expression with single dollar signs ($), or multiline by wrapping the expressions with double dollar signs ($$).\nSingle line expressions will be left aligned if they are not inside a text block.\nMultiline expressions will automatically be aligned at the center\n\nOne can aligned them at a specific point by wrapping the expression inside the double dollar signs with \\begin{split} and \\end{split}. Place an ampersand (&) where the alignment should be.\n\nAll special mathematical symbols (like roots, powers, underlines, bars, greek letters, summation, integral, fractions, and so on) start by using a backslash and the corresponding name.\n\n\n\n\nInline Expression\nLaTeX\n\n\n\n\n$\\sqrt{x}$\n\\(\\sqrt{x}\\)\n\n\n$x^2$\n\\(x^2\\)\n\n\n$\\underline{x}$\n\\(\\underline{x}\\)\n\n\n$\\bar{x}$\n\\(\\bar{x}\\)\n\n\n$\\sigma$\n\\(\\sigma\\)\n\n\n$\\frac{x+1}{x-1}$\n\\(\\frac{x+1}{x-1}\\)\n\n\n$\\sum_{0}^{\\infty}{\\frac{1}{n}}$\n\\(\\sum_{0}^{\\infty}{\\frac{1}{n}}\\)\n\n\n$\\int_{0}^{\\infty}{\\frac{1}{n}}$\n\\(\\int_{0}^{\\infty}{\\frac{1}{n}}\\)\n\n\n\nMultiline aligned at the equal sign input:\n$$\n\\begin{split}\n\\dot{x} & = \\sigma (3y - 5t)\\\\\n\\dot{x} & = 3 \\sigma y - 5 \\sigma t \\\\\n\\dot{x} & = (1+1+1) \\sigma y - (10-5) \\sigma t \\\\\n\\end{split}\n$$\nOutput: \\[\n\\begin{split}\n\\dot{x} & = \\sigma (3y - 5t)\\\\\n\\dot{x} & = 3 \\sigma y - 5 \\sigma t \\\\\n\\dot{x} & = (1+1+1) \\sigma y - (10-5) \\sigma t \\\\\n\\end{split}\n\\]\nMultiline aligned at the center input:\n$$\n\\begin{gather}\n\\dot{x} = \\sigma (3y - 5t)\\\\\n\\dot{x} = 3 \\sigma y - 5 \\sigma t\\\\\n\\dot{x} = (1+1+1) \\sigma y - (10-5) \\sigma t\\\\\n\\end{gather}\n$$\n\\[\n\\begin{gather}\n\\dot{x} = \\sigma (3y - 5t)\\\\\n\\dot{x} = 3 \\sigma y - 5 \\sigma t\\\\\n\\dot{x} = (1+1+1) \\sigma y - (10-5) \\sigma t\\\\\n\\end{gather}\n\\]"
  },
  {
    "objectID": "articles/Article1.html#colored-boxes",
    "href": "articles/Article1.html#colored-boxes",
    "title": "Learning to use Markdown",
    "section": "Colored boxes",
    "text": "Colored boxes\nColored boxes can be used to highlight important information.\n\nBlue boxes provide useful information (alert-info).\nYellow boxes provide warnings (alert-warning).\nGreen boxes indicate successful outcomes (alert-success).\nRed boxes provide critical information regarding errors or potential mistakes (alert-danger).\n\nThey are a special case and one has to use HTML notation for them. Start by using &lt;div&gt;&lt;/div&gt; with class \"alert alert-info\" (or the corresponding name) and finish by putting the text in between them.\nInput:\n&lt;div class=\"alert alert-info\"&gt;\n&lt;b&gt;Alert info:&lt;/b&gt; Blue boxes (alert-info) provide useful information.\n&lt;/div&gt;\nOutput:\n\nAlert info: Blue boxes (alert-info) provide useful information.\n\nInput:\n&lt;div class=\"alert alert-warning\"&gt;\n&lt;b&gt;Alert warning:&lt;/b&gt; Yellow boxes (alert-warning) provide warnings.\n&lt;/div&gt;\nOutput:\n\nAlert warning: Yellow boxes (alert-warning) provide warnings.\n\nInput:\n&lt;div class=\"alert alert-success\"&gt;\n&lt;b&gt;Alert success:&lt;/b&gt; Green boxes (alert-success) indicate successful outcomes.\n&lt;/div&gt;\nOutput:\n\nAlert success: Green boxes (alert-success) indicate successful outcomes.\n\nInput:\n&lt;div class=\"alert alert-danger\"&gt;\n&lt;b&gt;Alert danger:&lt;/b&gt; Red boxes (alert-danger) provide critical information regarding errors or potential mistakes.\n&lt;/div&gt;\nOutput:\n\nAlert danger: Red boxes (alert-danger) provide critical information regarding errors or potential mistakes."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Nicolas Tertusio",
    "section": "",
    "text": "Electromechanical engineer with experience in construction projects and electrical systems. I possess technical skills for developing blueprints, efficient lighting designs, and programming in various languages for tasks such as web applications and data analysis. Experienced in project management and supervision, including budgeting, quotations, contract payments, and material procurement. I have a keen interest in adhering to standards and utilizing corrective and predictive measurement equipment such as thermography, vibration analysis, and power quality assessments. Currently seeking to bridge my engineering interests with the flourishing field of artificial intelligence.\nTechnical skills: C#, Python, Flutter, Microsoft Office, AutoCAD\nSoft skills: responsible, organized, efficient, proactive\nLanguages: Spanish (native), English (Advanced, C2), Italian (intermedium B1)\n\n\nTechnological University of Panama | Panama, Panama City Bachelor's Degree in Electromechanical Engineering | 2017 - 2023\nUniversity of Buenos Aires | Buenos Aires, Argentina Master's Degree in Artificial Intelligence | Oct 2023 - Present\n\n\n\nEmpresas Melo, S.A. | Project Inspector | Jan 2020 - present"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Nicolas Tertusio",
    "section": "",
    "text": "Technological University of Panama | Panama, Panama City Bachelor's Degree in Electromechanical Engineering | 2017 - 2023\nUniversity of Buenos Aires | Buenos Aires, Argentina Master's Degree in Artificial Intelligence | Oct 2023 - Present"
  },
  {
    "objectID": "about.html#work-experience",
    "href": "about.html#work-experience",
    "title": "Nicolas Tertusio",
    "section": "",
    "text": "Empresas Melo, S.A. | Project Inspector | Jan 2020 - present"
  },
  {
    "objectID": "articles/Article2.html",
    "href": "articles/Article2.html",
    "title": "Markdown",
    "section": "",
    "text": "Markdown is a lightweight markup language with plain-text formatting syntax. With it, you can create formatted text using simple symbols and keywords.\nJupyter Notebooks are interactive computational environments where you can combine code execution, text, mathematics, plots, and rich media. They are widely used in data science, machine learning, and academic research for their flexibility and ease of use.\nIn this article I will be covering the most common formatting techniques used in Markdown."
  },
  {
    "objectID": "articles/Article2.html#text-formatting",
    "href": "articles/Article2.html#text-formatting",
    "title": "Markdown",
    "section": "Text formatting",
    "text": "Text formatting\n\nHeaders\nOne can apply header formatting using (#).\n# is a title\n## is a header\n### is a sub header\n#### is a sub sub header\n\n\nEmphasis\nEncapsulating a text in asterisks (*) one can apply italics format:\n*This text will be in italics.*\nThis text is in italics.\nEncapsulating a text in double asterisks (**) one can apply bold format:\n**This text will be bold.**\nThis text is bold.\nEncapsulating a text in double tilde (~) one can apply strikethrough:\n~~This text will be strikethrough.~~\nThis text is strikethrough.\nEncapsulating a text in backticks (`) one can apply coding format:\nThis text is displayed as code.\n`This text will be displayed as code.`\nEncapsulating a text in tripple backticks (```) a line before it begins and a line after it finishes, one can apply multiline coding format:\nThis is the first line of a multiline code.\nThis is the second line of a multiline code.\nThis is the third line of a multiline code.\nUsing a single greater than (&gt;) at the beggining, one can show a quote:\n&gt; This text will be a quote\n\nThis text is a quote"
  },
  {
    "objectID": "articles/Article2.html#lists",
    "href": "articles/Article2.html#lists",
    "title": "Markdown",
    "section": "Lists",
    "text": "Lists\n\nUnordered lists\nTo start an unordered list, use a single hyphen and space (-) followed by text. To start an ordered list, use a number, dot and space (1.) followed by text. To add sublists, follow the same syntax but add two spaces before.\nThis input:\n- First bullet point\n    - First sub bullet point\n        - First sub sub bullet point\n        - Second sub sub bullet point\n        - Third sub sub bullet point\n    - Second sub bullet point\n    - Third sub bullet point\n- Second bullet point\n- Third bullet point\nHas this output:\n\nFirst bullet point\n\nFirst sub bullet point\n\nFirst sub sub bullet point\nSecond sub sub bullet point\nThird sub sub bullet point\n\nSecond sub bullet point\nThird sub bullet point\n\nSecond bullet point\nThird bullet point\n\n\n\nOrdered lists\nTo start an ordered list, use a number, dot and space (1.) followed by text. To add sublists, follow the same syntax but add two spaces before.\nThis input:\n1. First points\n    1. First sub point\n        1. First sub sub point\n        2. Second sub sub point\n        3. Third sub sub point\n    2. Second sub point\n    3. Third sub point\n2. Second point\n3. Third point\nHas this output:\n\nFirst points\n\nFirst sub point\n\nFirst sub sub point\nSecond sub sub point\nThird sub sub point\n\nSecond sub point\nThird sub point\n\nSecond point\nThird point"
  },
  {
    "objectID": "articles/Article2.html#hyperlink",
    "href": "articles/Article2.html#hyperlink",
    "title": "Markdown",
    "section": "Hyperlink",
    "text": "Hyperlink\n\nExternal links\nLinking to outside websites is done by encapsulating in square brackets ([]) the text that can be clicked to use the link, followed by parenthesis (()) with the website’s URL. One can add a space after the URL and a text encapsulated by quotation marks (\"\") to show a name when the link is hovered over.\n[Text to be clicked](http://google.com \"Hovered information\")\nText to be clicked\n[External Link to Google](http://google.com)\nExternal Link to Google\n\n\nInternal links\nInternal links work the same way as external links, but inside the document. Instead of an URL, a number sign (#) is used followed by the name of the heading in the document to link. In this instance, spaces are replaced by hyphens.\n[This will take you to the text formatting header.](#text-formatting)\nThis will take you to the text formatting header.\n\n\nImages\nImages work the same way as external links, but to display them, an exclamation mark (!) is used before the square brackets ([]).\n![Look at this image!](https://flutter.github.io/assets-for-api-docs/assets/widgets/owl.jpg \"Fancy owl\")"
  },
  {
    "objectID": "articles/Article2.html#mathematical-notation",
    "href": "articles/Article2.html#mathematical-notation",
    "title": "Markdown",
    "section": "Mathematical notation",
    "text": "Mathematical notation\nMathematical notation is rendered by using LaTeX.\n\nIt can be used inline by wrapping a mathematical expression with single dollar signs ($), or multiline by wrapping the expressions with double dollar signs ($$).\nSingle line expressions will be left aligned if they are not inside a text block.\nMultiline expressions will automatically be aligned at the center\n\nOne can aligned them at a specific point by wrapping the expression inside the double dollar signs with \\begin{split} and \\end{split}. Place an ampersand (&) where the alignment should be.\n\nAll special mathematical symbols (like roots, powers, underlines, bars, greek letters, summation, integral, fractions, and so on) start by using a backslash and the corresponding name.\n\n\n\n\nInline Expression\nLaTeX\n\n\n\n\n$\\sqrt{x}$\n\\(\\sqrt{x}\\)\n\n\n$x^2$\n\\(x^2\\)\n\n\n$\\underline{x}$\n\\(\\underline{x}\\)\n\n\n$\\bar{x}$\n\\(\\bar{x}\\)\n\n\n$\\sigma$\n\\(\\sigma\\)\n\n\n$\\frac{x+1}{x-1}$\n\\(\\frac{x+1}{x-1}\\)\n\n\n$\\sum_{0}^{\\infty}{\\frac{1}{n}}$\n\\(\\sum_{0}^{\\infty}{\\frac{1}{n}}\\)\n\n\n$\\int_{0}^{\\infty}{\\frac{1}{n}}$\n\\(\\int_{0}^{\\infty}{\\frac{1}{n}}\\)\n\n\n\nMultiline aligned at the equal sign input:\n$$\n\\begin{split}\n\\dot{x} & = \\sigma (3y - 5t)\\\\\n\\dot{x} & = 3 \\sigma y - 5 \\sigma t \\\\\n\\dot{x} & = (1+1+1) \\sigma y - (10-5) \\sigma t \\\\\n\\end{split}\n$$\nOutput: \\[\n\\begin{split}\n\\dot{x} & = \\sigma (3y - 5t)\\\\\n\\dot{x} & = 3 \\sigma y - 5 \\sigma t \\\\\n\\dot{x} & = (1+1+1) \\sigma y - (10-5) \\sigma t \\\\\n\\end{split}\n\\]\nMultiline aligned at the center input:\n$$\n\\begin{gather}\n\\dot{x} = \\sigma (3y - 5t)\\\\\n\\dot{x} = 3 \\sigma y - 5 \\sigma t\\\\\n\\dot{x} = (1+1+1) \\sigma y - (10-5) \\sigma t\\\\\n\\end{gather}\n$$\n\\[\n\\begin{gather}\n\\dot{x} = \\sigma (3y - 5t)\\\\\n\\dot{x} = 3 \\sigma y - 5 \\sigma t\\\\\n\\dot{x} = (1+1+1) \\sigma y - (10-5) \\sigma t\\\\\n\\end{gather}\n\\]"
  },
  {
    "objectID": "articles/Article2.html#colored-boxes",
    "href": "articles/Article2.html#colored-boxes",
    "title": "Markdown",
    "section": "Colored boxes",
    "text": "Colored boxes\nColored boxes can be used to highlight important information.\n\nBlue boxes provide useful information (alert-info).\nYellow boxes provide warnings (alert-warning).\nGreen boxes indicate successful outcomes (alert-success).\nRed boxes provide critical information regarding errors or potential mistakes (alert-danger).\n\nThey are a special case and one has to use HTML notation for them. Start by using &lt;div&gt;&lt;/div&gt; with class \"alert alert-info\" (or the corresponding name) and finish by putting the text in between them.\nInput:\n&lt;div class=\"alert alert-info\"&gt;\n&lt;b&gt;Alert info:&lt;/b&gt; Blue boxes (alert-info) provide useful information.\n&lt;/div&gt;\nOutput:\n\nAlert info: Blue boxes (alert-info) provide useful information.\n\nInput:\n&lt;div class=\"alert alert-warning\"&gt;\n&lt;b&gt;Alert warning:&lt;/b&gt; Yellow boxes (alert-warning) provide warnings.\n&lt;/div&gt;\nOutput:\n\nAlert warning: Yellow boxes (alert-warning) provide warnings.\n\nInput:\n&lt;div class=\"alert alert-success\"&gt;\n&lt;b&gt;Alert success:&lt;/b&gt; Green boxes (alert-success) indicate successful outcomes.\n&lt;/div&gt;\nOutput:\n\nAlert success: Green boxes (alert-success) indicate successful outcomes.\n\nInput:\n&lt;div class=\"alert alert-danger\"&gt;\n&lt;b&gt;Alert danger:&lt;/b&gt; Red boxes (alert-danger) provide critical information regarding errors or potential mistakes.\n&lt;/div&gt;\nOutput:\n\nAlert danger: Red boxes (alert-danger) provide critical information regarding errors or potential mistakes."
  },
  {
    "objectID": "articles/Article3 copy.html",
    "href": "articles/Article3 copy.html",
    "title": "Markdown",
    "section": "",
    "text": "Markdown is a lightweight markup language with plain-text formatting syntax. With it, you can create formatted text using simple symbols and keywords.\nJupyter Notebooks are interactive computational environments where you can combine code execution, text, mathematics, plots, and rich media. They are widely used in data science, machine learning, and academic research for their flexibility and ease of use.\nIn this article I will be covering the most common formatting techniques used in Markdown."
  },
  {
    "objectID": "articles/Article3 copy.html#text-formatting",
    "href": "articles/Article3 copy.html#text-formatting",
    "title": "Markdown",
    "section": "Text formatting",
    "text": "Text formatting\n\nHeaders\nOne can apply header formatting using (#).\n# is a title\n## is a header\n### is a sub header\n#### is a sub sub header\n\n\nEmphasis\nEncapsulating a text in asterisks (*) one can apply italics format:\n*This text will be in italics.*\nThis text is in italics.\nEncapsulating a text in double asterisks (**) one can apply bold format:\n**This text will be bold.**\nThis text is bold.\nEncapsulating a text in double tilde (~) one can apply strikethrough:\n~~This text will be strikethrough.~~\nThis text is strikethrough.\nEncapsulating a text in backticks (`) one can apply coding format:\nThis text is displayed as code.\n`This text will be displayed as code.`\nEncapsulating a text in tripple backticks (```) a line before it begins and a line after it finishes, one can apply multiline coding format:\nThis is the first line of a multiline code.\nThis is the second line of a multiline code.\nThis is the third line of a multiline code.\nUsing a single greater than (&gt;) at the beggining, one can show a quote:\n&gt; This text will be a quote\n\nThis text is a quote"
  },
  {
    "objectID": "articles/Article3 copy.html#lists",
    "href": "articles/Article3 copy.html#lists",
    "title": "Markdown",
    "section": "Lists",
    "text": "Lists\n\nUnordered lists\nTo start an unordered list, use a single hyphen and space (-) followed by text. To start an ordered list, use a number, dot and space (1.) followed by text. To add sublists, follow the same syntax but add two spaces before.\nThis input:\n- First bullet point\n    - First sub bullet point\n        - First sub sub bullet point\n        - Second sub sub bullet point\n        - Third sub sub bullet point\n    - Second sub bullet point\n    - Third sub bullet point\n- Second bullet point\n- Third bullet point\nHas this output:\n\nFirst bullet point\n\nFirst sub bullet point\n\nFirst sub sub bullet point\nSecond sub sub bullet point\nThird sub sub bullet point\n\nSecond sub bullet point\nThird sub bullet point\n\nSecond bullet point\nThird bullet point\n\n\n\nOrdered lists\nTo start an ordered list, use a number, dot and space (1.) followed by text. To add sublists, follow the same syntax but add two spaces before.\nThis input:\n1. First points\n    1. First sub point\n        1. First sub sub point\n        2. Second sub sub point\n        3. Third sub sub point\n    2. Second sub point\n    3. Third sub point\n2. Second point\n3. Third point\nHas this output:\n\nFirst points\n\nFirst sub point\n\nFirst sub sub point\nSecond sub sub point\nThird sub sub point\n\nSecond sub point\nThird sub point\n\nSecond point\nThird point"
  },
  {
    "objectID": "articles/Article3 copy.html#hyperlink",
    "href": "articles/Article3 copy.html#hyperlink",
    "title": "Markdown",
    "section": "Hyperlink",
    "text": "Hyperlink\n\nExternal links\nLinking to outside websites is done by encapsulating in square brackets ([]) the text that can be clicked to use the link, followed by parenthesis (()) with the website’s URL. One can add a space after the URL and a text encapsulated by quotation marks (\"\") to show a name when the link is hovered over.\n[Text to be clicked](http://google.com \"Hovered information\")\nText to be clicked\n[External Link to Google](http://google.com)\nExternal Link to Google\n\n\nInternal links\nInternal links work the same way as external links, but inside the document. Instead of an URL, a number sign (#) is used followed by the name of the heading in the document to link. In this instance, spaces are replaced by hyphens.\n[This will take you to the text formatting header.](#text-formatting)\nThis will take you to the text formatting header.\n\n\nImages\nImages work the same way as external links, but to display them, an exclamation mark (!) is used before the square brackets ([]).\n![Look at this image!](https://flutter.github.io/assets-for-api-docs/assets/widgets/owl.jpg \"Fancy owl\")"
  },
  {
    "objectID": "articles/Article3 copy.html#mathematical-notation",
    "href": "articles/Article3 copy.html#mathematical-notation",
    "title": "Markdown",
    "section": "Mathematical notation",
    "text": "Mathematical notation\nMathematical notation is rendered by using LaTeX.\n\nIt can be used inline by wrapping a mathematical expression with single dollar signs ($), or multiline by wrapping the expressions with double dollar signs ($$).\nSingle line expressions will be left aligned if they are not inside a text block.\nMultiline expressions will automatically be aligned at the center\n\nOne can aligned them at a specific point by wrapping the expression inside the double dollar signs with \\begin{split} and \\end{split}. Place an ampersand (&) where the alignment should be.\n\nAll special mathematical symbols (like roots, powers, underlines, bars, greek letters, summation, integral, fractions, and so on) start by using a backslash and the corresponding name.\n\n\n\n\nInline Expression\nLaTeX\n\n\n\n\n$\\sqrt{x}$\n\\(\\sqrt{x}\\)\n\n\n$x^2$\n\\(x^2\\)\n\n\n$\\underline{x}$\n\\(\\underline{x}\\)\n\n\n$\\bar{x}$\n\\(\\bar{x}\\)\n\n\n$\\sigma$\n\\(\\sigma\\)\n\n\n$\\frac{x+1}{x-1}$\n\\(\\frac{x+1}{x-1}\\)\n\n\n$\\sum_{0}^{\\infty}{\\frac{1}{n}}$\n\\(\\sum_{0}^{\\infty}{\\frac{1}{n}}\\)\n\n\n$\\int_{0}^{\\infty}{\\frac{1}{n}}$\n\\(\\int_{0}^{\\infty}{\\frac{1}{n}}\\)\n\n\n\nMultiline aligned at the equal sign input:\n$$\n\\begin{split}\n\\dot{x} & = \\sigma (3y - 5t)\\\\\n\\dot{x} & = 3 \\sigma y - 5 \\sigma t \\\\\n\\dot{x} & = (1+1+1) \\sigma y - (10-5) \\sigma t \\\\\n\\end{split}\n$$\nOutput: \\[\n\\begin{split}\n\\dot{x} & = \\sigma (3y - 5t)\\\\\n\\dot{x} & = 3 \\sigma y - 5 \\sigma t \\\\\n\\dot{x} & = (1+1+1) \\sigma y - (10-5) \\sigma t \\\\\n\\end{split}\n\\]\nMultiline aligned at the center input:\n$$\n\\begin{gather}\n\\dot{x} = \\sigma (3y - 5t)\\\\\n\\dot{x} = 3 \\sigma y - 5 \\sigma t\\\\\n\\dot{x} = (1+1+1) \\sigma y - (10-5) \\sigma t\\\\\n\\end{gather}\n$$\n\\[\n\\begin{gather}\n\\dot{x} = \\sigma (3y - 5t)\\\\\n\\dot{x} = 3 \\sigma y - 5 \\sigma t\\\\\n\\dot{x} = (1+1+1) \\sigma y - (10-5) \\sigma t\\\\\n\\end{gather}\n\\]"
  },
  {
    "objectID": "articles/Article3 copy.html#colored-boxes",
    "href": "articles/Article3 copy.html#colored-boxes",
    "title": "Markdown",
    "section": "Colored boxes",
    "text": "Colored boxes\nColored boxes can be used to highlight important information.\n\nBlue boxes provide useful information (alert-info).\nYellow boxes provide warnings (alert-warning).\nGreen boxes indicate successful outcomes (alert-success).\nRed boxes provide critical information regarding errors or potential mistakes (alert-danger).\n\nThey are a special case and one has to use HTML notation for them. Start by using &lt;div&gt;&lt;/div&gt; with class \"alert alert-info\" (or the corresponding name) and finish by putting the text in between them.\nInput:\n&lt;div class=\"alert alert-info\"&gt;\n&lt;b&gt;Alert info:&lt;/b&gt; Blue boxes (alert-info) provide useful information.\n&lt;/div&gt;\nOutput:\n\nAlert info: Blue boxes (alert-info) provide useful information.\n\nInput:\n&lt;div class=\"alert alert-warning\"&gt;\n&lt;b&gt;Alert warning:&lt;/b&gt; Yellow boxes (alert-warning) provide warnings.\n&lt;/div&gt;\nOutput:\n\nAlert warning: Yellow boxes (alert-warning) provide warnings.\n\nInput:\n&lt;div class=\"alert alert-success\"&gt;\n&lt;b&gt;Alert success:&lt;/b&gt; Green boxes (alert-success) indicate successful outcomes.\n&lt;/div&gt;\nOutput:\n\nAlert success: Green boxes (alert-success) indicate successful outcomes.\n\nInput:\n&lt;div class=\"alert alert-danger\"&gt;\n&lt;b&gt;Alert danger:&lt;/b&gt; Red boxes (alert-danger) provide critical information regarding errors or potential mistakes.\n&lt;/div&gt;\nOutput:\n\nAlert danger: Red boxes (alert-danger) provide critical information regarding errors or potential mistakes."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science and Artificial Intelligence",
    "section": "",
    "text": "This website functions as a portfolio where I document my journey through learning about data science and artificial intelligence, a platform to share my progress, insights, and experiences as I delve into various topics in the field.\nHere, you will find a collection of articles and projects covering a range of subjects, including data visualization, data analysis, computer vision, deep learning, machine learning, and more. Through these posts, I aim to offer valuable information and share the lessons I’ve learned along the way.\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nLearning to use Markdown\n\n\nThe most common formatting techniques used in Markdown, a lightweight markup language with plain-text formatting syntax.\n\n\n\nMay 7, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMarkdown\n\n\nThe most common formatting techniques used in Markdown, a lightweight markup language with plain-text formatting syntax\n\n\n\nMay 7, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMarkdown\n\n\nThe most common formatting techniques used in Markdown, a lightweight markup language with plain-text formatting syntax\n\n\n\nMay 7, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMarkdown\n\n\nThe most common formatting techniques used in Markdown, a lightweight markup language with plain-text formatting syntax\n\n\n\nMay 7, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMarkdown\n\n\nThe most common formatting techniques used in Markdown, a lightweight markup language with plain-text formatting syntax\n\n\n\nMay 7, 2024\n\n\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  }
]